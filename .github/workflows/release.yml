name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      bypass_ci:
        description: 'Bypass CI requirement (only use if CI is broken)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: read
  pages: write
  id-token: write

jobs:
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.bypass_ci)
    outputs:
      ci-passed: ${{ steps.ci-status.outputs.ci-passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: make deps
      
      - name: Build application
        run: make build
      
      - name: Create dist archive and GitHub Pages artifacts
        run: |
          # Create a clean build directory for release
          mkdir -p release-build
          
          # Copy built application files (server build)
          if [ -d "dist" ]; then
            cp -r dist/* release-build/
          fi
          
          # Copy client build for GitHub Pages deployment
          if [ -d "client/dist" ]; then
            mkdir -p release-build/client
            cp -r client/dist release-build/client/
            # Also copy to public for server serving
            mkdir -p release-build/public
            cp -r client/dist/* release-build/public/ 2>/dev/null || true
          fi
          
          # Copy source files for reference
          cp -r client/src release-build/client/ 2>/dev/null || true
          cp -r client/public release-build/client/ 2>/dev/null || true
          
          # Copy necessary files
          cp package.json release-build/
          cp README.md release-build/
          cp LICENSE release-build/
          cp Makefile release-build/
          
          
          # Create GitHub Pages deployment directory with the same files
          mkdir -p gh-pages-deploy
          if [ -d "client/dist" ]; then
            cp -r client/dist/* gh-pages-deploy/
            echo "Copied client build to GitHub Pages deployment directory"
          else
            echo "No client/dist found for GitHub Pages deployment"
          fi
          
          # Verify the build structure
          echo "Release build structure:"
          find release-build -type f | head -20
          echo "Client dist files:"
          find release-build/client/dist -type f 2>/dev/null | head -10 || echo "No client dist files found"
          echo "GitHub Pages deployment files:"
          find gh-pages-deploy -type f | head -20
          
          # Create archive
          cd release-build
          tar -czf ../freedevtool-app.tar.gz .
          cd ..
          
          # Create zip for Windows users
          cd release-build
          zip -r ../freedevtool-app.zip .
          cd ..
      
      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      
      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          
          echo "Generating changelog for ${CURRENT_TAG}"
          
          # Create changelog content
          CHANGELOG_FILE="CHANGELOG.md"
          
          # Header
          echo "# Release Notes for ${CURRENT_TAG}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Released on $(date '+%Y-%m-%d')" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## ðŸ“¦ Installation" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo '1. Download `freedevtool-app.tar.gz` or `freedevtool-app.zip`' >> ${CHANGELOG_FILE}
          echo "2. Extract the archive" >> ${CHANGELOG_FILE}
          echo "3. Run \`make deps\`" >> ${CHANGELOG_FILE}
          echo "4. Run \`make start\`" >> ${CHANGELOG_FILE}
          echo "5. Open http://localhost:5000 in your browser" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## ðŸ”— Links" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "- [GitHub Repository](https://github.com/spring1843/freedevtool.app)" >> ${CHANGELOG_FILE}
          echo "- [Documentation](https://github.com/spring1843/freedevtool.app#readme)" >> ${CHANGELOG_FILE}
          echo "- [Report Issues](https://github.com/spring1843/freedevtool.app/issues)" >> ${CHANGELOG_FILE}
          
          # Set output for release notes
          echo "changelog_file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'FreeDev Tool App ${{ steps.version.outputs.version }}'
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: |
            freedevtool-app.tar.gz
            freedevtool-app.zip
            ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.bypass_ci }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
