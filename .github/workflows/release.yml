name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      bypass_ci:
        description: 'Bypass CI requirement (only use if CI is broken)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: read

jobs:
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.bypass_ci)
    outputs:
      ci-passed: ${{ steps.ci-status.outputs.ci-passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check CI status
        id: ci-status
        run: |
          # For tag pushes, check if CI passed on the commit before the tag
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_SHA="${{ github.sha }}"
            echo "Checking CI status for commit: $COMMIT_SHA"
            
            # Get the latest CI run for this commit
            CI_STATUS=$(gh api \
              "/repos/${{ github.repository }}/commits/$COMMIT_SHA/status" \
              --jq '.state' 2>/dev/null || echo "pending")
            
            echo "CI Status: $CI_STATUS"
            
            if [ "$CI_STATUS" = "success" ]; then
              echo "✅ CI passed for this commit"
              echo "ci-passed=true" >> $GITHUB_OUTPUT
            elif [ "$CI_STATUS" = "pending" ]; then
              echo "⏳ CI is still running, waiting..."
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "❌ CI failed for this commit"
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # For manual dispatch, check main branch CI status
            echo "Manual release triggered, checking main branch CI status"
            MAIN_STATUS=$(gh api \
              "/repos/${{ github.repository }}/commits/main/status" \
              --jq '.state' 2>/dev/null || echo "pending")
            
            echo "Main branch CI Status: $MAIN_STATUS"
            
            if [ "$MAIN_STATUS" = "success" ]; then
              echo "✅ Main branch CI is passing"
              echo "ci-passed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Main branch CI is not passing"
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [check-ci]
    if: always() && (needs.check-ci.result == 'success' || (github.event_name == 'workflow_dispatch' && inputs.bypass_ci))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Check if CI was bypassed
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bypass_ci }}" = "true" ]; then
            echo "⚠️  CI requirement was bypassed for this release"
            echo "This should only be used when CI is broken and needs emergency release"
          fi
      
      - name: Install dependencies
        run: make deps
      
      - name: Run quality checks (if CI bypassed, run minimal checks)
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bypass_ci }}" = "true" ]; then
            echo "Running minimal quality checks due to CI bypass..."
            make type-check
          else
            echo "Running full quality checks..."
            make type-check
            make test
          fi
      
      - name: Build application
        run: make build
      
      - name: Create dist archive
        run: |
          # Create a clean build directory
          mkdir -p release-build
          
          # Copy built application files (server build)
          if [ -d "dist" ]; then
            cp -r dist/* release-build/
          fi
          
          # Copy client build for GitHub Pages deployment
          if [ -d "client/dist" ]; then
            mkdir -p release-build/client
            cp -r client/dist release-build/client/
            # Also copy to public for server serving
            mkdir -p release-build/public
            cp -r client/dist/* release-build/public/ 2>/dev/null || true
          fi
          
          # Copy source files for reference
          cp -r client/src release-build/client/ 2>/dev/null || true
          cp -r client/public release-build/client/ 2>/dev/null || true
          
          # Copy necessary files
          cp package.json release-build/
          cp README.md release-build/
          cp LICENSE release-build/
          cp Makefile release-build/
          
          # Create production package.json (only production dependencies)
          node -e "
            const pkg = require('./package.json');
            const prodPkg = {
              name: pkg.name,
              version: pkg.version,
              type: pkg.type,
              license: pkg.license,
              scripts: { 
                start: pkg.scripts.start,
                build: pkg.scripts.build 
              },
              dependencies: pkg.dependencies
            };
            require('fs').writeFileSync('release-build/package.json', JSON.stringify(prodPkg, null, 2));
          "
          
          # Verify the build structure
          echo "Release build structure:"
          find release-build -type f | head -20
          echo "Client dist files:"
          find release-build/client/dist -type f 2>/dev/null | head -10 || echo "No client dist files found"
          
          # Create archive
          cd release-build
          tar -czf ../freedevtool-app.tar.gz .
          cd ..
          
          # Create zip for Windows users
          cd release-build
          zip -r ../freedevtool-app.zip .
          cd ..
      
      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Get previous tag
        id: previous_tag
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.version }}" | head -n 1)
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "Previous tag: ${PREVIOUS_TAG}"
      
      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          echo "Generating changelog from ${PREVIOUS_TAG} to ${CURRENT_TAG}"
          
          # Create changelog content
          CHANGELOG_FILE="CHANGELOG.md"
          
          # Header
          echo "# Release Notes for ${CURRENT_TAG}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Released on $(date '+%Y-%m-%d')" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          
          # Get commits since last tag
          if [ -n "${PREVIOUS_TAG}" ]; then
            echo "## 🚀 Changes" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            
            # Get merged PRs since last tag
            PR_LIST=$(git log ${PREVIOUS_TAG}..HEAD --grep="Merge pull request" --oneline --pretty=format:"%s" | grep "Merge pull request" || true)
            
            if [ -n "${PR_LIST}" ]; then
              echo "### 📋 Pull Requests Merged" >> ${CHANGELOG_FILE}
              echo "" >> ${CHANGELOG_FILE}
              echo "${PR_LIST}" | while IFS= read -r line; do
                # Extract PR number and title
                PR_INFO=$(echo "$line" | sed -E 's/.*Merge pull request #([0-9]+) from [^/]*\/(.+)/- #\1: \2/')
                echo "$PR_INFO" >> ${CHANGELOG_FILE}
              done
              echo "" >> ${CHANGELOG_FILE}
            fi
            
            # Get all commits (excluding merges)
            echo "### 📝 All Changes" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            git log ${PREVIOUS_TAG}..HEAD --no-merges --oneline --pretty=format:"- %s (%h)" >> ${CHANGELOG_FILE}
          else
            echo "## 🎉 Initial Release" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            echo "This is the first release of FreeDev Tool App!" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            echo "### ✨ Features" >> ${CHANGELOG_FILE}
            echo "- Complete offline developer tools suite" >> ${CHANGELOG_FILE}
            echo "- 49+ tools for development workflows" >> ${CHANGELOG_FILE}
            echo "- Privacy-focused design with local processing" >> ${CHANGELOG_FILE}
            echo "- Open source and community-driven" >> ${CHANGELOG_FILE}
          fi
          
          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## 📦 Installation" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo '1. Download `freedevtool-app.tar.gz` or `freedevtool-app.zip`' >> ${CHANGELOG_FILE}
          echo "2. Extract the archive" >> ${CHANGELOG_FILE}
          echo "3. Run \`make deps\`" >> ${CHANGELOG_FILE}
          echo "4. Run \`make start\`" >> ${CHANGELOG_FILE}
          echo "5. Open http://localhost:5000 in your browser" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## 🔗 Links" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "- [GitHub Repository](https://github.com/spring1843/freedevtool.app)" >> ${CHANGELOG_FILE}
          echo "- [Documentation](https://github.com/spring1843/freedevtool.app#readme)" >> ${CHANGELOG_FILE}
          echo "- [Report Issues](https://github.com/spring1843/freedevtool.app/issues)" >> ${CHANGELOG_FILE}
          
          # Set output for release notes
          echo "changelog_file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'FreeDev Tool App ${{ steps.version.outputs.version }}'
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: |
            freedevtool-app.tar.gz
            freedevtool-app.zip
            ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.bypass_ci }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add CI bypass warning to release
        if: github.event_name == 'workflow_dispatch' && inputs.bypass_ci
        run: |
          # Create warning message
          echo "⚠️ **CI BYPASS WARNING**" > ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          echo "This release was created with the CI requirement bypassed." >> ci-bypass-warning.txt
          echo "This should only be used in emergency situations when CI is broken." >> ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          echo "**Use with caution - this release may not have passed all quality checks.**" >> ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          
          # Append original changelog
          cat ${{ steps.changelog.outputs.changelog_file }} >> ci-bypass-warning.txt
          
          # Update release with warning
          gh release edit ${{ steps.version.outputs.version }} --notes-file ci-bypass-warning.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  deploy-to-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-and-release]
    if: always() && needs.build-and-release.result == 'success'
    permissions:
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: make deps
      
      - name: Build for GitHub Pages from Release Package
        run: |
          # Get the release tag/version
          RELEASE_TAG="${{ needs.build-and-release.outputs.version }}"
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          
          echo "Deploying release package: $RELEASE_TAG"
          
          # Download the release assets from the completed build-and-release job
          echo "Downloading release assets..."
          gh release download "$RELEASE_TAG" --pattern "*.tar.gz" --dir ./release-assets || {
            echo "Failed to download release assets, building fresh..."
            make build
          }
          
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          # Extract the gzip package if it exists
          PACKAGE_FILE=$(find ./release-assets -name "*.tar.gz" -type f | head -1)
          if [ -n "$PACKAGE_FILE" ] && [ -f "$PACKAGE_FILE" ]; then
            echo "Extracting release package: $PACKAGE_FILE"
            tar -xzf "$PACKAGE_FILE" -C gh-pages-deploy --strip-components=1
            
            # Verify extraction and look for built assets
            if [ -d "gh-pages-deploy/client/dist" ]; then
              echo "Found client/dist in package, moving to root"
              mv gh-pages-deploy/client/dist/* gh-pages-deploy/
              rm -rf gh-pages-deploy/client gh-pages-deploy/server gh-pages-deploy/tests
            elif [ ! -f "gh-pages-deploy/index.html" ]; then
              echo "Package extraction failed, falling back to manual build"
              rm -rf gh-pages-deploy/*
              make build
              cp -r client/dist/* gh-pages-deploy/ 2>/dev/null || true
            else
              echo "Successfully extracted release package for deployment"
            fi
          else
            echo "No release package found, building from source"
            make build
            cp -r client/dist/* gh-pages-deploy/ 2>/dev/null || true
          fi
          
          # Ensure we have an index.html for GitHub Pages
          if [ ! -f "gh-pages-deploy/index.html" ]; then
            echo "Creating fallback index.html"
            cat > gh-pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>FreeDevTool.App - Free, Secure, Open Source Developer Tools</title>
              <meta name="description" content="A comprehensive collection of 49+ open source developer tools with offline functionality. Privacy-focused, browser-based computation, zero data transmission.">
              <link rel="icon" type="image/png" href="/favicon.png">
              <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; img-src 'self' data: blob:; media-src 'self' blob:; connect-src 'self'; worker-src 'self' blob:; object-src 'none'; base-uri 'self'; form-action 'self';" />
          </head>
          <body>
              <div id="root"></div>
              <script type="module" src="/assets/index.js"></script>
          </body>
          </html>
          EOF
          fi
          
          # Add SPA support for client-side routing
          cat > gh-pages-deploy/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>FreeDevTool.App - Redirecting...</title>
              <script>
                  // GitHub Pages SPA redirect
                  sessionStorage.redirect = location.href;
              </script>
              <meta http-equiv="refresh" content="0;URL='/index.html'">
          </head>
          <body>
              <p>Redirecting to FreeDevTool.App...</p>
              <script>
                  window.location.replace('/index.html');
              </script>
          </body>
          </html>
          EOF
          
          # Configure for GitHub Pages static hosting
          touch gh-pages-deploy/.nojekyll
          echo "include: ['_*']" > gh-pages-deploy/_config.yml
          
          # Add deployment info
          cat > gh-pages-deploy/deployment-info.json << EOF
          {
            "version": "$RELEASE_TAG",
            "deployedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "source": "github-release-package",
            "standalone": true
          }
          EOF
          
          echo "GitHub Pages deployment prepared from release package:"
          echo "Version: $RELEASE_TAG"
          echo "Files:"
          find gh-pages-deploy -type f | head -20
          echo "Total files: $(find gh-pages-deploy -type f | wc -l)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages-deploy'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Update release with Pages URL
        run: |
          RELEASE_TAG="${{ needs.build-and-release.outputs.version }}"
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          PAGES_URL="${{ steps.deployment.outputs.page_url }}"
          
          # Add Pages URL to release description
          echo "## 🌐 Live Demo" > pages-info.txt
          echo "" >> pages-info.txt
          echo "Experience FreeDevTool.App live at: [$PAGES_URL]($PAGES_URL)" >> pages-info.txt
          echo "" >> pages-info.txt
          echo "This standalone web application is deployed directly from the release package and includes all ${{ vars.TOTAL_TOOLS || '49+' }} tools." >> pages-info.txt
          echo "The deployment is completely self-contained and works offline after initial load." >> pages-info.txt
          echo "" >> pages-info.txt
          
          # Get existing release notes and append Pages info
          gh release view "$RELEASE_TAG" --json body --jq '.body' > existing-notes.txt
          
          # Combine Pages info with existing notes
          cat pages-info.txt existing-notes.txt > combined-notes.txt
          
          # Update the release
          gh release edit "$RELEASE_TAG" --notes-file combined-notes.txt
          
          echo "✅ Release updated with GitHub Pages deployment URL: $PAGES_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
