name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  build-and-release:
    container: ghcr.io/spring1843/freedevtool.app/e2e:768b0f3
    permissions:
      contents: write
      pages: write
      packages: read
      id-token: write

    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: make deps

      - name: Build application
        run: make build

      - name: Create dist archive
        run: |
          # Create a clean build directory for release
          mkdir -p release-build

          # Copy deployable public files
          if [ -d "dist" ]; then
            cp -r dist/public/* release-build/
          fi
           
          # Create archive
          cd dist
          tar -czf ../freedevtool-app.tar.gz .
          cd ..

          # Create zip for Windows users
          cd release-build
          zip -r ../freedevtool-app.zip .
          cd ..

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.version.outputs.version }}"

          echo "Generating changelog for ${CURRENT_TAG}"

          # Create changelog content
          CHANGELOG_FILE="CHANGELOG.md"

          # Header
          echo "# Release Notes for ${CURRENT_TAG}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Released on $(date '+%Y-%m-%d')" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## ðŸ“¦ Installation" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo '1. Download `freedevtool-app.tar.gz` or `freedevtool-app.zip`' >> ${CHANGELOG_FILE}
          echo "2. Extract the archive" >> ${CHANGELOG_FILE}
          echo "3. Run \`make deps\`" >> ${CHANGELOG_FILE}
          echo "4. Run \`make start\`" >> ${CHANGELOG_FILE}
          echo "5. Open http://localhost:5000 in your browser" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## ðŸ”— Links" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "- [Live FreeDevTool.App](https://freedevtool.app)" >> ${CHANGELOG_FILE}
          echo "- [GitHub Repository](https://github.com/spring1843/freedevtool.app)" >> ${CHANGELOG_FILE}
          echo "- [Documentation](https://github.com/spring1843/freedevtool.app#readme)" >> ${CHANGELOG_FILE}
          echo "- [Report Issues](https://github.com/spring1843/freedevtool.app/issues)" >> ${CHANGELOG_FILE}

          # Set output for release notes
          echo "changelog_file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "FreeDev Tool App ${{ steps.version.outputs.version }}"
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: |
            freedevtool-app.tar.gz
            freedevtool-app.zip
            ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.bypass_ci }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub Pages
        run: |
          # Create a clean build directory for release
          mkdir -p gh-pages-deploy

          # Copy deployable public files
          if [ -d "dist" ]; then
            cp -r dist/public/* gh-pages-deploy/
          fi

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
