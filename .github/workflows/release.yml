name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      bypass_ci:
        description: 'Bypass CI requirement (only use if CI is broken)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: read

jobs:
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.bypass_ci)
    outputs:
      ci-passed: ${{ steps.ci-status.outputs.ci-passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check CI status
        id: ci-status
        run: |
          # For tag pushes, check if CI passed on the commit before the tag
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_SHA="${{ github.sha }}"
            echo "Checking CI status for commit: $COMMIT_SHA"
            
            # Get the latest CI run for this commit
            CI_STATUS=$(gh api \
              "/repos/${{ github.repository }}/commits/$COMMIT_SHA/status" \
              --jq '.state' 2>/dev/null || echo "pending")
            
            echo "CI Status: $CI_STATUS"
            
            if [ "$CI_STATUS" = "success" ]; then
              echo "✅ CI passed for this commit"
              echo "ci-passed=true" >> $GITHUB_OUTPUT
            elif [ "$CI_STATUS" = "pending" ]; then
              echo "⏳ CI is still running, waiting..."
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "❌ CI failed for this commit"
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # For manual dispatch, check main branch CI status
            echo "Manual release triggered, checking main branch CI status"
            MAIN_STATUS=$(gh api \
              "/repos/${{ github.repository }}/commits/main/status" \
              --jq '.state' 2>/dev/null || echo "pending")
            
            echo "Main branch CI Status: $MAIN_STATUS"
            
            if [ "$MAIN_STATUS" = "success" ]; then
              echo "✅ Main branch CI is passing"
              echo "ci-passed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Main branch CI is not passing"
              echo "ci-passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [check-ci]
    if: always() && (needs.check-ci.result == 'success' || (github.event_name == 'workflow_dispatch' && inputs.bypass_ci))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Check if CI was bypassed
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bypass_ci }}" = "true" ]; then
            echo "⚠️  CI requirement was bypassed for this release"
            echo "This should only be used when CI is broken and needs emergency release"
          fi
      
      - name: Install dependencies
        run: make deps
      
      - name: Run quality checks (if CI bypassed, run minimal checks)
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bypass_ci }}" = "true" ]; then
            echo "Running minimal quality checks due to CI bypass..."
            make type-check
          else
            echo "Running full quality checks..."
            make type-check
            make test
          fi
      
      - name: Build application
        run: make build
      
      - name: Create dist archive
        run: |
          # Create a clean build directory
          mkdir -p release-build
          
          # Copy built application files
          cp -r dist/* release-build/
          cp -r client/dist/* release-build/public/ 2>/dev/null || true
          
          # Copy necessary files
          cp package.json release-build/
          cp README.md release-build/
          cp LICENSE release-build/
          
          # Create production package.json (only production dependencies)
          node -e "
            const pkg = require('./package.json');
            const prodPkg = {
              name: pkg.name,
              version: pkg.version,
              type: pkg.type,
              license: pkg.license,
              scripts: { start: pkg.scripts.start },
              dependencies: pkg.dependencies
            };
            require('fs').writeFileSync('release-build/package.json', JSON.stringify(prodPkg, null, 2));
          "
          
          # Create archive
          cd release-build
          tar -czf ../freedevtool-app.tar.gz .
          cd ..
          
          # Create zip for Windows users
          cd release-build
          zip -r ../freedevtool-app.zip .
          cd ..
      
      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Get previous tag
        id: previous_tag
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.version }}" | head -n 1)
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "Previous tag: ${PREVIOUS_TAG}"
      
      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          echo "Generating changelog from ${PREVIOUS_TAG} to ${CURRENT_TAG}"
          
          # Create changelog content
          CHANGELOG_FILE="CHANGELOG.md"
          
          # Header
          echo "# Release Notes for ${CURRENT_TAG}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Released on $(date '+%Y-%m-%d')" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          
          # Get commits since last tag
          if [ -n "${PREVIOUS_TAG}" ]; then
            echo "## 🚀 Changes" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            
            # Get merged PRs since last tag
            PR_LIST=$(git log ${PREVIOUS_TAG}..HEAD --grep="Merge pull request" --oneline --pretty=format:"%s" | grep "Merge pull request" || true)
            
            if [ -n "${PR_LIST}" ]; then
              echo "### 📋 Pull Requests Merged" >> ${CHANGELOG_FILE}
              echo "" >> ${CHANGELOG_FILE}
              echo "${PR_LIST}" | while IFS= read -r line; do
                # Extract PR number and title
                PR_INFO=$(echo "$line" | sed -E 's/.*Merge pull request #([0-9]+) from [^/]*\/(.+)/- #\1: \2/')
                echo "$PR_INFO" >> ${CHANGELOG_FILE}
              done
              echo "" >> ${CHANGELOG_FILE}
            fi
            
            # Get all commits (excluding merges)
            echo "### 📝 All Changes" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            git log ${PREVIOUS_TAG}..HEAD --no-merges --oneline --pretty=format:"- %s (%h)" >> ${CHANGELOG_FILE}
          else
            echo "## 🎉 Initial Release" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            echo "This is the first release of FreeDev Tool App!" >> ${CHANGELOG_FILE}
            echo "" >> ${CHANGELOG_FILE}
            echo "### ✨ Features" >> ${CHANGELOG_FILE}
            echo "- Complete offline developer tools suite" >> ${CHANGELOG_FILE}
            echo "- 49+ tools for development workflows" >> ${CHANGELOG_FILE}
            echo "- Privacy-focused design with local processing" >> ${CHANGELOG_FILE}
            echo "- Open source and community-driven" >> ${CHANGELOG_FILE}
          fi
          
          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## 📦 Installation" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo '1. Download `freedevtool-app.tar.gz` or `freedevtool-app.zip`' >> ${CHANGELOG_FILE}
          echo "2. Extract the archive" >> ${CHANGELOG_FILE}
          echo "3. Run \`make deps\`" >> ${CHANGELOG_FILE}
          echo "4. Run \`make start\`" >> ${CHANGELOG_FILE}
          echo "5. Open http://localhost:5000 in your browser" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## 🔗 Links" >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "- [GitHub Repository](https://github.com/spring1843/freedevtool.app)" >> ${CHANGELOG_FILE}
          echo "- [Documentation](https://github.com/spring1843/freedevtool.app#readme)" >> ${CHANGELOG_FILE}
          echo "- [Report Issues](https://github.com/spring1843/freedevtool.app/issues)" >> ${CHANGELOG_FILE}
          
          # Set output for release notes
          echo "changelog_file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'FreeDev Tool App ${{ steps.version.outputs.version }}'
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: |
            freedevtool-app.tar.gz
            freedevtool-app.zip
            ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.bypass_ci }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add CI bypass warning to release
        if: github.event_name == 'workflow_dispatch' && inputs.bypass_ci
        run: |
          # Create warning message
          echo "⚠️ **CI BYPASS WARNING**" > ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          echo "This release was created with the CI requirement bypassed." >> ci-bypass-warning.txt
          echo "This should only be used in emergency situations when CI is broken." >> ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          echo "**Use with caution - this release may not have passed all quality checks.**" >> ci-bypass-warning.txt
          echo "" >> ci-bypass-warning.txt
          
          # Append original changelog
          cat ${{ steps.changelog.outputs.changelog_file }} >> ci-bypass-warning.txt
          
          # Update release with warning
          gh release edit ${{ steps.version.outputs.version }} --notes-file ci-bypass-warning.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update package.json version
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}
          
          # Update package.json version
          npm version ${VERSION_NUMBER} --no-git-tag-version
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${VERSION_NUMBER}" || exit 0
          git push origin main